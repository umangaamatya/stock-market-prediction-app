version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:14
    container_name: stock_postgres
    environment:
      POSTGRES_DB: stock_market_db
      POSTGRES_USER: stock_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-stockpass123}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
    networks:
      - stock_network
    restart: unless-stopped

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: stock_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - stock_network
    restart: unless-stopped

  # Stock Market App
  stock_app:
    build: .
    container_name: stock_app
    ports:
      - "8501:8501"
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_USER=stock_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-stockpass123}
      - POSTGRES_DB=stock_market_db
      - NEWS_API_KEY=${NEWS_API_KEY}
      - ALPHA_VANTAGE_API_KEY=${ALPHA_VANTAGE_API_KEY}
    volumes:
      - ./data:/app/data
      - ./models/saved_models:/app/models/saved_models
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
    networks:
      - stock_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ETL Service (runs periodically)
  etl_service:
    build: .
    container_name: stock_etl
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_USER=stock_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-stockpass123}
      - POSTGRES_DB=stock_market_db
      - NEWS_API_KEY=${NEWS_API_KEY}
      - ALPHA_VANTAGE_API_KEY=${ALPHA_VANTAGE_API_KEY}
    volumes:
      - ./data:/app/data
      - ./models/saved_models:/app/models/saved_models
      - ./logs:/app/logs
    depends_on:
      - postgres
    networks:
      - stock_network
    restart: unless-stopped
    command: ["python", "scripts/real_time_updater.py", "--mode", "continuous"]

  # Nginx reverse proxy (production)
  nginx:
    image: nginx:alpine
    container_name: stock_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - stock_app
    networks:
      - stock_network
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:
  redis_data:

networks:
  stock_network:
    driver: bridge
